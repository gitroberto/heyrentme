<?php

namespace AppBundle\Entity;

use AppBundle\Utils\SearchParams;
use Doctrine\ORM\EntityRepository;

/**
 * EquipmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EquipmentRepository extends EntityRepository
{
    public function getAllBySubcategory($subcategoryId) {
        $sql = "select e from AppBundle:Equipment e where e.subcategory = :subcategoryId";
        $query = $this->getEntityManager()->createQuery($sql);
        $query->setParameter('subcategoryId', $subcategoryId);
        return $query->getResult();        
    }   
    public function getAllByUserId($userId) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e')
            ->from('AppBundle:Equipment', 'e')
            ->join('e.user', 'u');
        $qb->andWhere("u.id = {$userId}");

        $q = $qb->getQuery();
        
        return $q->getResult();        
    }
    
    /*
    public function getAll($categoryId = null) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('e')
            ->from('AppBundle:Equipment', 'e')
            ->join('e.subcategory', 's');
        if ($categoryId != null) {
            $qb->andWhere("s.category = {$categoryId}");
        }
        
        $q = $qb->getQuery();
        return $q->getResult();
    }
    */
    public function getAll(SearchParams $params) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        /*
         * Please not this query uses "fetch join".
         * It fetches images and discounts (associated with equipments) immediately 
         * (instead of lazy loading them later).
         * Keep for optimum performance.
         */        
        $qb->select('e', 'i', 'd') // this line forces fetch join
            ->from('AppBundle:Equipment', 'e')
            ->join('e.subcategory', 's')
            ->leftJoin('e.images', 'i')
            ->leftJoin('e.discounts', 'd');
        
        if ($params->getCategoryId() != null) {
            $qb->andWhere("s.category = {$params->getCategoryId()}");
        }
        if ($params->getDiscount()) {
            $now = date('Y-m-d H:i:s');
            $qb->andWhere("d.createdAt <= '{$now}'")
                ->andWhere("d.expiresAt >= '{$now}'");
        }
        if ($params->getTestBuy()) {
            $qb->andWhere('e.priceBuy > 0');
        }
        if ($params->getSort() === 'date') {
            $qb->orderBy('e.createdAt', 'desc');
        }
        elseif ($params->getSort() === 'price') {
            $qb->orderBy ('e.price', 'asc');
        }
        
        $q = $qb->getQuery();
        return $q->getResult();
    }
    
    public function clearFeatures($equipmentId) {
        $sql = 'delete from AppBundle:EquipmentFeature ef where ef.equipment = :equipment';
        $q = $this->getEntityManager()->createQuery($sql);
        $q->setParameter(':equipment', $equipmentId);
        $q->execute();
    }
    public function saveFeatures($equipmentId, $features) {
        $this->clearFeatures($equipmentId);
        $em = $this->getEntityManager();
        foreach ($features as $id => $text) {
            $ef = new EquipmentFeature();
            $ef->setEquipment($em->getReference('AppBundle:Equipment', $equipmentId));
            $ef->setFeature($em->getReference('AppBundle:Feature', $id));
            $ef->setName($text);
            $em->persist($ef);
        }
        $em->flush();
        $em->clear();
    }
    public function getFeaturesAsArray($equipmentId) {
        $sql = "select * from equipment_feature where equipment_id = {$equipmentId}";
        $conn = $this->getEntityManager()->getConnection();
        $rows = $conn->query($sql)->fetchAll();
        $conn->close();
        
        $result = array();
        foreach ($rows as $row) {
            $result[$row['feature_id']] = $row['name'];
        }
        
        return $result;
    }
    public function getEquipmentFeatures($equipmentId) {
        /*
         * ef = equipment_feature
         * f = feature
         */
        $dql = <<<EOT
                select e, ef, f, fs
                from AppBundle:Equipment e
                    join e.features ef
                    join ef.feature f
                    join f.featureSection fs
                where e.id = :equipmentId
                order by fs.position asc, f.position asc
EOT;
        $q = $this->getEntityManager()->createQuery($dql);
        $q->setParameter(':equipmentId', $equipmentId);
        $eqs = $q->getResult();
        
        if (count($eqs) == 0) {
            return array();
        }
        
        $fts = array();
        $eq = $eqs[0];
        
        // iterate over features and assemble array        
        foreach ($eq->getFeatures() as $ef) {               // ef = equipment_feature
            $fs = $ef->getFeature()->getFeatureSection();   
            $name = $fs->getName();                         // feature_section name becomes array's key
            if (!array_key_exists($name, $fts)) {
                $fts[$name] = array();
            }
            if ($ef->getName() !== null) {                  // array of selected features becomes array's value
                $val = $ef->getName();
            } else {
                $val = $ef->getFeature()->getShortname();   
            }
            array_push($fts[$name], $val);
        }
        foreach ($fts as $key => $val) {                    // translate array of values into a string (comma-separated)
            $fts[$key] = implode(', ', $val);
        }
        return $fts;
    }
}
