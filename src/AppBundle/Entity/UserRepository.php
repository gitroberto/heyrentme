<?php

namespace AppBundle\Entity;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function getGridOverview($sortColumn, $sortDirection, $pageSize, $page, $email, $name, $surname, $status, $createdAt, $modifiedAt) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        // build query
        $qb->select('u')
            ->from('AppBundle:User', 'u');   
        // where
        if (!empty($email)) {
            $qb->andWhere($qb->expr()->like('u.username', ':email'));
        }
        if (!empty($name)) {
            $qb->andWhere($qb->expr()->like('u.name', ':name'));
        }
        if (!empty($surname)) {
            $qb->andWhere($qb->expr()->like('u.surname', ':surname'));
        }
        
        if (!empty($status)) {
            $qb->andWhere($qb->expr()->eq('u.status', ':status'));
        }
        
        if (!empty($createdAt)) {
            $qb->andWhere($qb->expr()->like('u.createdAt', ':createdAt'));
        }
        
        if (!empty($modifiedAt)) {
            $qb->andWhere($qb->expr()->like('u.modifiedAt', ':modifiedAt'));
        }
        
        // sort by
        if (!empty($sortColumn)) {
            if (!empty($sortDirection)) {
                $qb->orderBy($sortColumn, $sortDirection);
            }
            else {
                $qb->orderBy($sortColumn);
            }
        }

        $q = $qb->getQuery();
        // set params
        
        
        if (!empty($email)) {
            $q->setParameter(':email', "%{$email}%");
        }
        if (!empty($name)) {
            $q->setParameter(':name', "%{$name}%");
        }
        if (!empty($surname)) {
            $q->setParameter(':surname', "%{$surname}%");
        }
        if (!empty($status)) {
            $q->setParameter(':status', $status);
        }
        if (!empty($createdAt)) {
            $q->setParameter(':createdAt', "%{$createdAt}%");
        }
        if (!empty($modifiedAt)) {
            $q->setParameter(':modifiedAt', "%{$modifiedAt}%");
        }
        
        
        
        
        // page and page size
        if (!empty($pageSize)) {
            $q->setMaxResults($pageSize);
        }
        if (!empty($page) && $page != 1) {
            $q->setFirstResult(($page - 1) * $pageSize);
        }
        return $q->getResult();        
    }
    public function countAll() {
        return $this->createQueryBuilder('u')
            ->select('count(u.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }   

    /* score */
    public function addRating($userRating) {
        $em = $this->getEntityManager();
        $em->persist($userRating);
        $em->flush();
        $this->updateScore($userRating->getUser()->getId());
    }
    public function updateScore($userId) {
        $sql = <<<EOT
            update fos_user
            set rating = (
                    select avg(rating)
                    from user_rating
                    where user_id = {$userId}
            )
            where id = {$userId}
EOT;
        $conn = $this->getEntityManager()->getConnection();
        $conn->exec($sql);
        $conn->close();        
    }
    
    public function getAllForWelcomeEmails() {
        $qb = $this->getEntityManager()->createQueryBuilder();        
        $qb->select('u')
            ->from('AppBundle:User', 'u');   
        
        $qb->orWhere('u.secondDayEmailSentAt is null');
        $qb->orWhere('u.thirdDayEmailSentAt is null');
                
        return $qb->getQuery()->getResult();        
    }
    
    public function deleteUserAccount($user, $folder){
        // todo: adjust query
        $id = $user->getId();
        $m = $this->getEntityManager();        
        
        $equipments = $m->getRepository('AppBundle:Equipment')->getAllByUserId($user->getId());
        $talents = $m->getRepository('AppBundle:Talent')->getAllByUserId($user->getId());
        
        $image = $user->getImage();
        
        $user->setImage(null);        
        $this->RemoveAndDeleteRelatedImage($m, $image, $folder); // todo: why not Image::removeImage?
        $m->flush();
        
        foreach ($equipments as $eq) {
            foreach ($eq->getImages() as $ei) {
                $i = $ei->getImage();                
                $eq->removeImage($ei);                
                $m->remove($ei);
                $m->flush();
                $this->RemoveAndDeleteRelatedImage($m, $i, $folder);
            }
        }
        
        foreach ($talents as $tal) {
            foreach ($tal->getImages() as $ti) {
                
                $i = $ti->getImage();
                $tal->removeImage($ti);
                $m->remove($ti);
                $m->flush();
                $this->RemoveAndDeleteRelatedImage($m, $i, $folder);
                           
            }
        }
        
        $sql = <<<EOT
    delete from user_rating where user_id= {$id};
        
    delete ebc
    from equipment_booking_cancel ebc
        inner join equipment_booking eb on ebc.booking_id = eb.id
        inner join equipment_inquiry ei on eb.inquiry_id = ei.id
        inner join equipment e
    where e.user_id = {$id};

    delete er
    from equipment_rating er
        inner join equipment_booking eb on er.booking_id = eb.id
        inner join equipment_inquiry ei on eb.inquiry_id = ei.id
        inner join equipment e
    where e.user_id = {$id} or ei.user_id = {$id};

    delete eb
    from equipment_booking eb
        inner join equipment_inquiry ei on eb.inquiry_id = ei.id
        inner join equipment e on ei.equipment_id = e.id
    where e.user_id = {$id} or ei.user_id = {$id};
    
    delete ei
    from equipment_inquiry ei
        inner join equipment e on ei.equipment_id = e.id
    where e.user_id = {$id} or ei.user_id = {$id};
    
    delete ei
    from equipment_image ei
        inner join equipment e on ei.equipment_id = e.id
    where e.user_id = {$id};
    
    delete er
    from equipment_rating er
        inner join equipment e on er.equipment_id = e.id
    where e.user_id = {$id};
    
    delete from equipment_question where user_id = {$id};
    
    delete from equipment where user_id = {$id};
    
    delete ebc
    from talent_booking_cancel ebc
        inner join talent_booking eb on ebc.talent_booking_id = eb.id
        inner join talent_inquiry ei on eb.talent_inquiry_id = ei.id
        inner join talent e
    where e.user_id = {$id} or ei.user_id = {$id};
    
    delete er
    from talent_rating er
        inner join talent_booking eb on er.booking_id = eb.id
        inner join talent_inquiry ei on eb.talent_inquiry_id = ei.id
        inner join talent e
    where e.user_id = {$id} or ei.user_id = {$id};
    
    delete eb
    from talent_booking eb
        inner join talent_inquiry ei on eb.talent_inquiry_id = ei.id
        inner join talent e on ei.talent_id = e.id
    where e.user_id = {$id} or ei.user_id = {$id};
    
    delete ei
    from talent_inquiry ei
        inner join talent e on ei.talent_id = e.id
    where e.user_id = {$id} or ei.user_id = {$id};
    
    delete ei
    from talent_image ei
        inner join talent e on ei.talent_id = e.id
    where e.user_id = {$id};
    
    delete er
    from talent_rating er
        inner join talent e on er.talent_id = e.id
    where e.user_id = {$id};
    
    delete from talent_question where user_id = {$id};
    delete from talent where user_id = {$id};
    
    delete from equipment_booking_cancel where user_id = {$id};
    delete from talent_booking_cancel where user_id = {$id};
    delete from equipment_inquiry where user_id = {$id};
    delete from talent_inquiry where user_id = {$id};
    delete from discount_code where user_id = {$id};
    delete from user_rating where user_id = {$id};
    delete from fos_user where id = {$id};
EOT;
        
        
        $conn = $m->getConnection();
        $conn->executeUpdate($sql);
        //$this->get('monolog.logger.artur')->debug($sql);
    }
    
    public function RemoveAndDeleteRelatedImage($manager, $image, $folder){
        if ($image){
            $manager->getRepository('AppBundle:Image')->removeImage($image, $folder);
            $manager->getRepository('AppBundle:Image')->deleteById($image->getId());
        }    
    }
}
