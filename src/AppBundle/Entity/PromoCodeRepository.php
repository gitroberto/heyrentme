<?php

namespace AppBundle\Entity;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PromoCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromoCodeRepository extends EntityRepository
{
    
    public function findValid($code) {
        $q = $this->createQueryBuilder('pc')
                ->select('pc')
                ->andWhere('pc.code = :code')
                ->setParameter('code', $code)
                ->andWhere('pc.status = :status')
                ->setParameter('status', PromoCode::STATUS_NEW)
                ->andWhere('pc.expiresAt > :now')
                ->setParameter('now', new DateTime())
                ->setMaxResults(1)
                ->getQuery();
        $rows = $q->getResult();
        if (count($rows) === 1)
            return $rows[0];
        else
            return null;
    }

    public function getGridOverview($sortColumn, $sortDirection, $pageSize, $page) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        // build query
        $qb->select(array('pc', 'u', 'e', 'eb', 'ei', 'ep', 't', 'tb', 'ti', 'tp'))
            ->from('AppBundle:PromoCode', 'pc')
                ->leftJoin('pc.user', 'u')
                ->leftJoin('pc.equipmentBooking', 'eb')
                ->leftJoin('eb.inquiry', 'ei')
                ->leftJoin('ei.equipment', 'e')
                ->leftJoin('e.user', 'ep')
                ->leftJoin('pc.talentBooking', 'tb')
                ->leftJoin('tb.inquiry', 'ti')
                ->leftJoin('ti.talent', 't')
                ->leftJoin('t.user', 'tp');
        // sort by
        if (!empty($sortColumn)) {
            if (!empty($sortDirection)) {
                $qb->orderBy($sortColumn, $sortDirection);
            }
            else {
                $qb->orderBy($sortColumn);
            }
        }

        $q = $qb->getQuery();
        // page and page size
        if (!empty($pageSize)) {
            $q->setMaxResults($pageSize);
        }
        if (!empty($page) && $page != 1) {
            $q->setFirstResult(($page - 1) * $pageSize);
        }
        return $q->getResult();        
    }
    
    public function countAll() {
        return $this->createQueryBuilder('pc')
            ->select('count(pc.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
